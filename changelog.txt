==2016-09-15== (C.Chalumeau & F.Marchis) ==
* TIFF files (extensions .tiff and .tif) are now supported but not yet in 3D

==2016-07-27== (C. Chalumeau & F. Marchis) ==
* AIDA 1.4 can now run independently from Priithon. All Pritthon procedures and functions have been 
  directly added in Priithon_heritage using Anaconda native library
* Bug on multiple frames and their location was corrected. Absolute path can now be used in the AIDA_Settings
* The header of the fits files are preserved. If multiple frames are used for the deconvolution, the 
  header of the first frame is used
*  AIDA native CCG was replaced withthe scipy.optimize.minimize
* An issue with the cost function of the PSF was corrected. The cost function of the PSF in PSF mode
  is properly calculated.
*  AIDA is now offered as a stand-alone version which is compatible with Windows, Apple Mac and Linux OS.


== 2013-06-11 (E. Hom) ==

 * commented out temp code on lines 3722-3729 and 4037-4047 of AIDA_Functions.py that was causing 
 	both mPSF to be estimated as a gaussian PSF and resulted in weird result shifting because of an 
 	improper specification of the gaussian PSF center.  Moreover, last bit of temp code was setting 
 	all Npsfs to be estimated as gaussians upon the first optimization round
 * added orig=(0,0) to line 3724 of F.gaussianArr call to ensure proper PSF--was causing quadrant 
 	shifting in Npsfs decons this change is cryptic since temp code has now been cmmented out
 * changed line 448 of AIDA_Setting.py to debug_numpy_error_settings = {'all': 'raise','under': 'ignore'}
 * corrected ave_J summation using N.sum in lines 2873 (for Nobjects) and 2915 (for Npsfs) 
 	of AIDA_Functions.py, to be taken along "axis=0" 
 * note changes made by "KBU" to handle image_filenames string/list can be found in AIDA_Functions.py 
 	by searching for "KBU"
 * added "decon_type" as a suffix to the timestamp directory names of results (this helps identify 
 	folders of results)
 * added new option "-n" to allow for initial PSFs to be either the average of entered PSFs (mPSF) 
 	or the inputted PSFs themselves given the inflexibility of the PSF optimization at times, using 
 	the initial guess, especially for Npsfs decon seems to make better sense.  Used deep .copy();
 	incorrect to use [:]= as that is only a view
 * modified Output2File function of AIDA_GFunctions.py to also output results in JPEG format (using
    PIL) to make it easy to view results on the fly
 * added text re: correct minimum sigma_det2 value; Hom et al. paper incorrectly had theoretical 
    minimum be sqrt(pi/2).  True lower bound is 1/(2*pi) but this leads to numerical instabilities
    and nan's generated in the cost function (since it's too close to analytical point leading to
    division by zero).  Although coded in this possibility, left the minimum value as sqrt(pi/2);
    this is fine since as described in the paper, there is a plane of theta values that work,
    and empirically, this does not significantly change the quality of deconvolutions.
    See AIDA_GFunctions lines 134-166 for details
 * PENDING (not yet implemented but we're working on it): changed FFTW workaround to use pyFFTW 
 	(Gomersall version) wrapper modules around FFTW3; this requires that FFTW3 libraries be 
 	installed, not just python and Priithon
	
== 2009-07-28 ==
 * changed AGF.ThresholdPSF  to AGF.ThresholdPSF_inplace 
    * does not return PSF, instead threholds in place
    * also takes care of negativity - i.e. PSF is clipped to 0
 * added check to `SubtractPSFbackground` that only one of sigmas of bkg_% can be non-zero

== 2009-07-18 ==
 * added function NonNegativePSF(PSF) to the suite of GFunctions.py
 * added use of NonNegativePSF() in CalculatePSFOTFstats() in Functions.py to make sure all negative 
 	pixels in mPSF are 0.
 * started options for reading in TIFF files
 
== 2009-07-16 ==
 * added option to `Fun.PrintTime(...,denominator=1.)` to better handle "division by zero"
 * added option to `RunAIDA(settings_filename=None)` - note that `ParseCommandLine` does not use this
 * added `Set.debug_numpy_error_settings = {'all': 'raise'}`
 * cleanup of doc strings: use """ and start on line AFTER """

== 2009-07-14 ==
 * fixed usage of U.topPercentile - causing seg fault for PSF > 65535
 * added `--debug` command line option 
 * "debug" mode now prints both on screen and into log file

----------------------------------
old: pre AIDA 1.2
----------------------------------


--- 2006 12 22
* removed TEMP.py

* untabbify:   replayce all tabs with 4 spaces
* replace nd.  with U.nd.
   remove from numarray import nd_image as nd
* in GFunctions.py:GenMonoImageDataSet   remove 
        from numarray import fft
    (was not used)
* in GFunctions.py:Gen2DharmonicOTFNoisyPSFs rename argument N to nn
* replace \bna\b  by N  in all .py$ files
* N.Float...  by N.float...
* N.Complex64 by N.complex128
* N.Complex32 by N.complex64
* N.Int... by N.int...
* In GFunctions:
   INSTEAD OF:
      N.random_array.normal(mean, std, shape)  
      N.random_array.poisson(mean, shape)  
    replaced by
      N.random.normal(loc, scale, size)
      N.random.possion(lam, size)
   defined this:
 class N_random_array:
    def normal(mean, std, shape):
        return N.random.normal(mean,std,shape)
    def poisson(mean, shape=1):
        return N.random.poisson(mean,shape)
* N.array(shape=    replaced by N.empty(shape=

* type()       replaced by dtype
* type=        replaced by dtype=
* output_type  replaced by output_dtype
* astype(type) replaced by astype(dtype)  --- type by dtype *mostly*
* Set.type     Set.dtype

* AIDA.py:  put code into functions and added if __name__ == "__main__"
       moved 'import AIDA_Functions' from "after Check_Settings" to beginning
* reoved gc.collect from AIDA_Functions

TODO:
* fix: type(Set.background) in (types.IntType, types.LongType, types.FloatType, 
            types.NoneType):  (in AIDA_check_settings.py)
* GFunction.py:RadialArray    why not use F.randialArr
* in Function.py: why  ..array.. + (N.ones(shape=(1,1),dtype=N.int),)   [[ try:  +1]]

* why needed:   gc.collect()  in AIDA_Functions.py:AIDA_Setup()

* DONE:  need to get pyFits for Numpy  (copy new directory called pyfits into PrMacNPPC,...)




20061230
========
* ##hack## pyfits for windows:  
  before urllib.urlretrieve(name)
  inserted
           if name[:2].upper() == 'C:':           #seb
               name = 'file:/' + name           #seb
  ### this should be done better  ----  IT'S A HACK #####

* in N.take  -- remove 'array='  (argument not named!)
    (maybe 'indices='   dito)
* replaced ALL occurences  of 'rank'   with   'ndim'
